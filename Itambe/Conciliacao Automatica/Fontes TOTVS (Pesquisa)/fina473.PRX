#INCLUDE "PROTHEUS.CH"
#INCLUDE "FINA473.CH" 
#include "fileio.ch"
#INCLUDE "FWMVCDEF.CH"
#INCLUDE "FWLIBVERSION.CH"

Static __cProcPrinc := "FINA473"
Static lFWCodFil := .T.
Static __lUpdated := NIL


//-------------------------------------------------------------------
/*/{Protheus.doc} FINA473
Rotina de Conciliação Bancária Automática 

Rotina de Conciliação Bancária atualizada, utilizando tabela para gravação da conciliação.

Essa rotina permite realizar importar o extrato bancário e conciliar num momento posterior.

@author	Alvaro Camillo Neto
@since		30/09/2013
@version	MP11.90
		
/*/
//-------------------------------------------------------------------

Function FINA473(lAutomato)
Local aArea			:= {}
Local oBrowse
Local lExibeTela	:=  !(IsBlind())

PRIVATE cCadastro	:=  STR0001  //"Conciliação Bancária"
PRIVATE aRotina 	:= Menudef()

Default lAutomato	:= .F.

If GetRpoRelease() >= "12.1.033" .and. FindFunction("MsgExpRot")
	If lExibeTela
		F380ExpRot("FINA473","https://tdn.totvs.com/x/PKL5Kg") 
	EndIf			
Endif

If GetHlpLGPD({"A6_COD", "A6_AGENCIA", "A6_NUMCON"})
	Return .F.
Endif

aArea := GetArea()

F473DicOk()

dbSelectArea("SIF")
dbSelectArea("SIG")
If xFilial("SIG") == xFilial("SE5") .And. xFilial("SIF") == xFilial("SE5") 
	oBrowse := FWMBrowse():New()
	oBrowse:SetAlias('SIF')
	oBrowse:SetDescription(STR0001) //'Conciliação Bancária'
	oBrowse:AddLegend( "IF_STATUS=='1'", "RED", STR0002 ) 	 //"Não conciliado"
	oBrowse:AddLegend( "IF_STATUS=='2'", "YELLOW", STR0003 ) //"Em Andamento"
	oBrowse:AddLegend( "IF_STATUS=='3'", "GREEN", STR0004 )  //"Conciliado"
	oBrowse:Activate()
Else
	Help(" ",1,"FIN473SE5",,STR0051, 1, 0 ) //"As tabelas da rotina devem ter o mesmo compartilhamento da tabela SE5"
Endif

RestArea(aArea)

Return()

//-------------------------------------------------------------------
/*/{Protheus.doc} MENUDEF
Função de definição do Menu da Rotina

@author	Alvaro Camillo Neto
@since		25/09/2013
@version	MP11.90
		
/*/
//-------------------------------------------------------------------
   

Static Function MenuDef()     
Local aRotina

aRotina	:= {}
ADD OPTION aRotina TITLE STR0008  		ACTION 'PesqBrw'            	OPERATION 1 ACCESS 0		//'Pesquisar'	
ADD OPTION aRotina TITLE STR0011 		ACTION 'F473Import(,,3)' 		OPERATION 3 ACCESS 0		//"Importar"	
ADD OPTION aRotina TITLE STR0012 		ACTION 'F473Concil(,,4)' 		OPERATION 4 ACCESS 0	    //"Conciliar"
ADD OPTION aRotina TITLE STR0009 		ACTION 'VIEWDEF.FINA473'  		OPERATION 2 ACCESS 0 		//'Visualizar'		
ADD OPTION aRotina TITLE STR0010		ACTION 'VIEWDEF.FINA473' 		OPERATION 5 ACCESS 0 		//'Excluir'

ADD OPTION aRotina TITLE STR0013 ACTION 'F473LogExt()'    OPERATION 6 ACCESS 0			//"Log Processamento"

Return(Aclone(aRotina))

//-------------------------------------------------------------------
/*/{Protheus.doc} ModelDef
Função de definição do modelo do extrato bancário

@author	Alvaro Camillo Neto
@since		25/09/2013
@version	MP11.90
		
/*/
//-------------------------------------------------------------------
Static Function ModelDef()
Local oModel

 
Local oStr1:= FWFormStruct(1,'SIF')
 
Local oStr2:= FWFormStruct(1,'SIG')
oModel := MPFormModel():New('FINA473')
oModel:SetDescription(STR0014) //'Extrato Bancario'
oModel:addFields('SIFMASTER',,oStr1)

oStr2:AddField(STR0015,STR0015 , 'IG_COR', 'BT',15,,,,,,{|| F473IGSTA() },,.F.,.T. )//'Status'
oModel:addGrid('SIGDETAIL','SIFMASTER',oStr2)
oModel:SetRelation('SIGDETAIL', { { 'IG_FILIAL', 'xFilial("SIG")' }, { 'IG_IDPROC', 'IF_IDPROC' } }, SIG->(IndexKey(1)) )

oModel:getModel('SIFMASTER'):SetDescription(STR0014)//'Extrato Bancario'
oModel:getModel('SIGDETAIL'):SetDescription(STR0016)//'Movimento Extrato'
oModel:getModel('SIGDETAIL'):SetOptional(.T.)

oModel:SetVldActivate( {|oModel| FI473VLMOD(oModel) } )
oModel:GetModel( 'SIGDETAIL' ):SetNoInsertLine( .T. )
oModel:GetModel( 'SIGDETAIL' ):SetNoDeleteLine( .T. )
oModel:GetModel( 'SIGDETAIL' ):SetNoUpdateLine( .T. )

Return oModel


//-------------------------------------------------------------------
/*/{Protheus.doc} FI473VLMOD
Realiza a validação do modelo de dados do MVC antes de iniciar a rotina

@author	Alvaro Camillo Neto
@since		02/10/2013
@version	MP11.90
		
/*/
//-------------------------------------------------------------------
Static Function FI473VLMOD(oModel)
Local nOperation := oModel:GetOperation()
Local lRet := .T.

If lRet .And. (nOperation == MODEL_OPERATION_DELETE )
	
	If SIF->IF_STATUS == '2' .Or. SIF->IF_STATUS == '3'
		Help(" ",1,"FI473EXC01",,STR0047 ,1,0)//"Somente extratos não conciliados podem ser excluídos."
		lRet:=.F.
	EndIf
	
EndIf

Return lRet



//-------------------------------------------------------------------
/*/{Protheus.doc} ViewDef
Função de definição do modelo do extrato bancário

@author	Alvaro Camillo Neto
@since		25/09/2013
@version	MP11.90
		
/*/
//-------------------------------------------------------------------
Static Function ViewDef()
Local oView
Local oModel := ModelDef()
Local oStr1:= FWFormStruct(2, 'SIF')
Local oStr2:= FWFormStruct(2, 'SIG')

oView := FWFormView():New()
oView:SetModel(oModel)
oView:AddField('SIF_VIEW' , oStr1,'SIFMASTER' )
oView:AddGrid('SIG_VIEW' , oStr2,'SIGDETAIL')  

oStr1:RemoveField( 'IF_STATUS' )
oStr1:RemoveField( 'IF_ARQSUM' )
oView:CreateHorizontalBox( 'BOXFORM1', 30)

oStr2:RemoveField( 'IG_SEQMOV' )
oStr2:RemoveField( 'IG_IDPROC' )
oStr2:RemoveField( 'IG_STATUS' )
oStr2:AddField( 'IG_COR','01',STR0015,STR0015,, 'BC','@BMP',,,.T. ) //Status

If __lUpdated
	oStr2:RemoveField( 'IG_BCOEXT' )
Endif	

oView:CreateHorizontalBox( 'BOXFORM3', 70)
oView:SetOwnerView('SIF_VIEW','BOXFORM1')
oView:SetOwnerView('SIG_VIEW','BOXFORM3')

oView:EnableTitleView('SIG_VIEW' , STR0016 ) //'Movimento Extrato'
oView:EnableTitleView('SIF_VIEW' , STR0014 ) //'Extrato Bancario'

oView:AddIncrementField('SIG_VIEW' , 'IG_ITEM' ) 

Return oView

//-------------------------------------------------------------------
/*/{Protheus.doc} FIGSTATUS
Função que retorna a cor da tabela SIG

@author	Alvaro Camillo Neto
@since		25/09/2013
@version	MP11.90
		
/*/
//-------------------------------------------------------------------

Function F473IGSTA()
Local cCor		:= "BR_VERMELHO"

cCor := F473COR(SIG->IG_STATUS)

Return cCor

//-------------------------------------------------------------------
/*/{Protheus.doc} F473COR
Função que retorna a cor da legenda

@author alvaro.camillo

@since 03/10/2013
@version 1.0
/*/
//-------------------------------------------------------------------
Function F473COR(cStatus)
Local cCor := ""

IF cStatus == '2'
	cCor:= "BR_AMARELO"
ElseIf cStatus == '3'
	cCor := "BR_VERDE"
ElseIf cStatus == '4'
	cCor := "BR_CINZA"
ElseIf cStatus == '5'
	cCor := "BR_CANCEL"
ElseIf cStatus == '6'
	cCor := "BR_PINK"
Else
	cCor := "BR_VERMELHO"
EndIf

Return cCor

//-------------------------------------------------------------------
/*/{Protheus.doc} F473Concil
Realiza a operação de conciliação, chamando a rotina FINA473

@author	Alvaro Camillo Neto
@since		01/10/13
@version	MP11.90
		
/*/
//-------------------------------------------------------------------

Function F473Concil(cAlias,nReg,nOpc)

	Local cTitulo    := STR0050 //"Conciliar"
	Local cPrograma  := 'FINA473A'
	Local cPerg		 := "FINA473"
	Local nOperation := MODEL_OPERATION_UPDATE

	Local aSelFil  	 := {}
	Local cSA6Emp	 := FWModeAccess("SA6",1)
	Local cSA6UNe	 := FWModeAccess("SA6",2)
	Local cSA6Fil	 := FWModeAccess("SA6",3)
	Local lGestao    := Iif( lFWCodFil, FWSizeFilial() > 2, .F. )	// Indica se usa Gestao Corporativa
	Local lSE5Access := Iif( lGestao, FWModeAccess("SE5",1) == "C", FWModeAccess("SE5",3) == "C")
	Local __lFA473Co := ExistBlock("FA473CON")
	Local lIntPFS    := SuperGetMV("MV_JURXFIN",,.F.) // Integração SIGAPFS x SIGAFIN

	Local lGestaoEmp	:= !(Empty(FwSM0Layout(, 1)))
	Local lGestaoUni	:= !(Empty(FwSM0Layout(, 2)))
	Local lSA6EmpExc	:= cSA6Emp == "E"
    Local lSA6UniExc	:= cSA6UNe == "E"
    Local lSA6FilExc	:= cSA6Fil == "E"
	Local nMedia        := 0

	If !lGestaoEmp
		lSA6EmpExc := lSA6FilExc
	EndIf
	
	If !lGestaoUni
		lSA6UniExc := lSA6FilExc
	EndIf

   If __lFA473Co
		__aRetE5E1 := ExecBlock("FA473CON",.F.,.F.)
		If ValType(__aRetE5E1) == "A"
			If Len(__aRetE5E1) == 1
				If Len(__aRetE5E1[1]) != 2
					Help( ,,"FA473ERPE",, STR0075 + CRLF + STR0076 + CRLF + STR0077 , 1, 0 )
					// "O Ponto de Entrada FA473CON esta ativo, porém esta retornando variável ARRAY diferente do padrão necessário. " # " A rotina não poderá ser processada. " # " Favor verificar. "
					Return .F.
				Endif
			Else
				Help( ,,"FA473ERPE",, STR0075 + CRLF + STR0076 + CRLF + STR0077 , 1, 0 )
				// "O Ponto de Entrada FA473CON esta ativo, porém esta retornando variável ARRAY diferente do padrão necessário. " # " A rotina não poderá ser processada. " # " Favor verificar. "
				Return .F.
			Endif
		Else
			Help( ,,"FA473ERPE",, STR0075 + CRLF + STR0076 + CRLF + STR0077 , 1, 0 )
			//"O Ponto de Entrada FA473CON esta ativo, porém esta retornando variável ARRAY diferente do padrão necessário. " # " A rotina não poderá ser processada. " # " Favor verificar. "
			Return .F.
		Endif
	Endif

	If lIntPFS .And. FindFunction("JurVldExt") // Integração SIGAPFS x SIGAFIN
		If !JurVldExt(SIF->(Recno())) // Validações SIGAPFS
			Return .F.
		EndIf
	EndIf

	If Pergunte(cPerg,.T.)
		If mv_par09 == 1
				//SA6 exclusivo nao permite a selecao de filiais
			If cSA6Fil == "E"
				Help( ,, 'SA6_COMPART',,;
				STR0052+CRLF+; //"O compartilhamento do cadastro de Bancos (tabela SA6) não permite a seleção de filiais."
				STR0053+CRLF+; //"O processo será feito considerando apenas titulos da filial corrente."
				" "+CRLF+;
				STR0054+CRLF+; //"Compartilhamento da tabela SA6:"
				STR0055+If(cSA6Emp == "C",STR0056,STR0057)+CRLF+;		//"Empresa    : "###"Compartilhado"###"Exclusivo"
				STR0058+If(cSA6UNe == "C",STR0056,STR0057)+CRLF+;		//"Un. Negócio: "###"Compartilhado"###"Exclusivo"
				STR0059+If(cSA6Fil == "C",STR0056,STR0057)+CRLF+;  		//"Filial     : "###"Compartilhado"###"Exclusivo"
				" "+CRLF+;
					STR0060+CRLF+;		//"(Para que esta mensagem deixe de ser apresentada, altere a pergunta "
				STR0061,1,0)		//"<Seleciona Filiais?> para Não.)"

				aSelFil := { cFilAnt }
								
			ElseIf lSE5Access
				Help( ,, 'SE5_COMPART',,STR0062,1,0) //"A tabela de Movimentação Bancária está compartilhada.O processo será feito considerando apenas movimentos da filial corrente"
				aSelFil := { cFilAnt }

			ElseIf Len( aSelFil ) <= 0
				If lSA6EmpExc .Or. lSA6UniExc .Or. lSA6FilExc
					aSelFil := AdmGetFil(.F., .T., "SE5")
				Else
					aSelFil := AdmGetFil(.T., .F., "SE5")
				EndIf
			Endif
		Else
			aSelFil := { cFilAnt }
		EndIf
		If Len(aSelFil) > 0
			FI473IniCTB(aSelFil)

			BEGIN TRANSACTION
				nOpc := FWExecView( cTitulo , cPrograma, nOperation, /*oDlg*/, {|| .T. } ,/*bOk*/ , /*nPercReducao*/, /*aEnableButtons*/, /*bCancel*/ , /*cOperatId*/, /*cToolBar*/, /*oModel*/ )
				
				If nOpc == 1 // Cancelou a operação faz os rollback da operação
					DisarmTransaction()
				EndIf
				
				//Zera as variáveis estáticas da conciliacao 
				FI473IniCTB()
			END TRANSACTION
			
			If ExistBlock("FA473012") 
				ExecBlock("FA473012",.F.,.F.,nOpc)
			EndIf
			
			//Gravação da métrica de tempo de entrada.
			If FindFunction("F473MedEnt") .And. (nMedia := F473MedEnt()) > 0
				FwCustomMetrics():setAverageMetric("TempoEntrada", "financeiro-protheus_tempo-conclusão-processo_seconds", nMedia)
				
				//Gravação da métrica de tempo de gravação.
				If nOpc == 0 .And. nMedia > 0 .And. (nMedia := F473MedGrv()) > 0
					FwCustomMetrics():setAverageMetric(AllTrim(ProcName()) + "TempoGravacao", "financeiro-protheus_tempo-conclusão-processo_seconds", nMedia)
				EndIf			
			EndIf		
		EndIf
	Endif	
Return

//-------------------------------------------------------------------
/*/{Protheus.doc} F473Import
Realiza a importação do arquivo de extrato e grava na tabela SIG

@author	Alvaro Camillo Neto
@since		01/10/13
@version	MP11.90
		
/*/
//-------------------------------------------------------------------

Function F473Import(cAlias,nReg,nOpc)

Local lRet 		:= .F.
Local aParam1	:= {}
Local aParam2	:= {}
Local aConfig1	:= {}
Local aConfig2	:= {}
Local nOpcA		:= 0
Local cProc		:= __cProcPrinc + "IMP"
Local cSubProc	:= ""
Local cIdCV8	:= ""
Local aLog 		:= {}
Local nX		:= 0
Local cIdProc	:= F473ProxNum("SIF")
Local aLogLanc	:= {}
Local nOrdSIF	:= SIF->(IndexOrd())

Private aTitulos:= {}
Private oTitulo	:= NIL
Private oBrowse	:= NIL
PRIVATE oWizard := NIL

If nOpc=3
	//Etapa2 -Wizard de Importação do Extrato Bancário - Dados Bancários e Filtros dos Movimentos Bancários.
	aParam1 := { { 1 ,STR0048,Replicate(" ",LEN(SIF->IF_IDPROC)) ,"@!" 	 ,""  ,"" ,".F." ,60 ,.T. },;//"Processo"
	{ 1 ,STR0017,Replicate(" ",LEN(SA6->A6_COD))     ,"@!" 	 ,"ExistCpo('SA6')"  ,"SA6" ,"" ,20 ,.T. }, ; //"Banco"
	{ 1 ,STR0041,Replicate(" ",LEN(SA6->A6_AGENCIA)) ,"@!" 	 ,,,"" ,20 ,.T. }, ; //"Agencia"
	{ 1 ,STR0042,Replicate(" ",LEN(SA6->A6_NUMCON))  ,"@!" 	 ,,,"" ,20 ,.T. }, ; //"Conta"
	{ 1 ,STR0063,Replicate(" ",LEN(SEE->EE_SUBCTA))  ,"@!" 	 ,,,"" ,20 ,.T. }, ; //"Conta"
	{ 1 ,STR0018,Replicate(" ",LEN(SIF->IF_DESC))    ,"" 	 ,""  ,"" ,"" ,120 ,.T. } } //"Descrição"
	
	aConfig1 := {cIdProc ,CriaVar("A6_COD"),CriaVar("A6_AGENCIA"),CriaVar("A6_NUMCON"),CriaVar("EE_SUBCTA"), CriaVar("IF_DESC") }
	
	//Etapa3 -Wizard de Importação do Extrato Bancário - Dados de Configuração da Importação.
	aParam2 := {{ 6 ,STR0020,space(20) ,"@!" 	 ,""  ,"" ,150 ,.T.,"Todos Tipos |*.*","",GETF_LOCALHARD,.T.}, ; //"Arquivo Conf.:"
	{ 6 ,STR0019,space(20) ,"@!" 	 ,""  ,"" ,150 ,.T.,"Todos Tipos |*.*","",GETF_LOCALHARD,.T.}} //"Arquivo Extrato:"
	
	aConfig2 := {space(TamSx3("IF_ARQCFG")[1]), space(TamSx3("IF_ARQIMP")[1])}
	
	//Etapa1
	oWizard := APWizard():New(STR0001/*<chTitle>*/, ; //"Início"
	STR0021, STR0023,; //"Início"##"Importação Extrato"
	STR0022,; //"Essa rotina irá importar o arquivo de extrato bancário para posterior conciliação."
	{|| .T.}/*<bNext>*/, ;
	{|| .T.}/*<bFinish>*/,;
	/*<.lPanel.>*/, , , /*<.lNoFirst.>*/)
	
	//Etapa2
	oWizard:NewPanel( STR0024/*<chTitle>*/,;  //"Dados do Banco e Movimentos Bancários"
	STR0025/*<chMsg>*/, ;  //"Informações necessárias referente ao banco gerador do arquivo com as informações do extrato"
	{||.T.}/*<bBack>*/, ;
	{|| FA473VlBCd(aConfig1)}/*<bNext>*/, ;
	{||.T.}/*<bFinish>*/,;
	.T./*<.lPanel.>*/,;
	{||ParamBox(aParam1 ,STR0026,aConfig1,,,.F.,120,3, oWizard:oMPanel[oWizard:nPanel]) }/*<bExecute>*/ ) //"Filtro"
	
	//Etapa3
	oWizard:NewPanel( STR0027/*<chTitle>*/,;  //"Configuração da Importação"
	STR0028/*<chMsg>*/, ;  //"Informações necessárias referente aos arquivos de extrato bancário"
	{||.T.}/*<bBack>*/, ;
	{|| FA473VlBCd(aConfig2)}/*<bNext>*/, ;
	{|| nOpcA := 1, .T. }/*<bFinish>*/,;
	.T./*<.lPanel.>*/,;
	{||ParamBox(aParam2 ,STR0013,aConfig2,,,.F.,120,3, oWizard:oMPanel[oWizard:nPanel]) }/*<bExecute>*/ ) //"Filtro"
	
	oWizard:Activate( .T./*<.lCenter.>*/,;
	{||.T.}/*<bValid>*/, ;
	{||.T.}/*<bInit>*/, ;
	{||.T.}/*<bWhen>*/ ) 
Endif

If nOpcA == 1
	BEGIN TRANSACTION
		MsgRun(STR0038,STR0023,{|| lRet := F473ImpExt(aConfig1, aConfig2, nOpc,@aLog,@aLogLanc) })
		
		If !lRet
			DisarmTransaction()
		EndIf
	END TRANSACTION
	
	If !lRet
		cSubProc 	:= cIdProc
		ProcLogIni( {},cProc,cSubProc,@cIdCV8 )
		ProcLogAtu( "INICIO" , STR0044 ,,,.T. ) //"Importação de Extrato Bancario"
		
			For nX := 1 to Len(aLog)
				ProcLogAtu("ERRO",STR0045 + cValtoChar(aLog[nX][1]) ,aLog[nX][2],,.F. )//"Linha do Arquivo "
			Next nX	
			
			For nX := 1 to len(aLogLanc)
				ProcLogAtu("ALERTA",,aLogLanc[nX][2],,.F.)
			Next nX
		
		ProcLogAtu( "FIM" ,,,,.T.)
		ProcLogView(cFilAnt,cProc,cSubProc,cIdCV8)
	EndIf
Endif	

SIF->(dbSetOrder(nOrdSIF))

Return .T.

//-------------------------------------------------------------------
/*/{Protheus.doc} F473ImpExt

Função que recebe os dados do wizard e processa a importação do arquivo 

@author	Alvaro Camillo Neto
@since		01/10/13
@version	MP11.90
		
/*/
//-------------------------------------------------------------------

Function F473ImpExt(aConfig1, aConfig2, nOpc,aLog,aLogLanc)

Local lRet			:= .T.
Local cPosNum		:= ""
Local cPosData		:= ""
Local cPosValor		:= ""
Local cPosOcor		:= ""
Local cPosDescr		:= ""
Local cPosDif		:= "" 
Local lPosNum		:=.F.
Local lPosData		:=.F.
Local lPosValor		:=.F.
Local lPosOcor		:=.F.
Local lPosDescr		:=.F.
Local lPosDif		:=.F.
Local lPosBco		:=.F.
Local lPosAge		:=.F.
Local lPosCta		:=.f.
Local nLidos		:= 0
Local nLenNum		:= 0
Local nLenData		:= 0
Local nLenValor		:= 0
Local nLenDescr		:= 0
Local nLenOcor		:= 0
Local nLenDif		:= 0
Local nLenBco		:= 0
Local nLenAge		:= 0
Local nLenCta		:= 0
Local cArqConf		:= ""
Local cArqEnt		:= ""
Local xBuffer
Local cDebCred		:= ""
Local nHdlBco		:= 0
Local cBanco 		:= 	Space(TamSX3("E5_BANCO")[1])
Local cAgencia 		:= 	Space(TamSX3("E5_AGENCIA")[1]) 
Local cConta 		:= 	Space(TamSX3("E5_CONTA")[1])
Local cDifer		:= ""
Local lPosVSI		:=.F.
Local lPosDSI 		:=.F.
Local lPosDCI 		:=.F.
Local nLenVSI		:= 0
Local nLenDSI		:= 0
Local nLenDCI		:= 0
Local cPosVSI		:= ""
Local cPosDSI		:= ""
Local cPosDCI		:= ""
Local lFebraban		:= .F.
Local lGrava		:= .T.
Local nTipoDat		:= 0
Local lGravaSIF		:= .T.
Local nHdlConf		:= 0
Local nTamArq		:= 0
Local nTamDet		:= 0
Local cPosBco		:= ""
Local cPosAge		:= ""
Local cPosCta		:= ""
Local cNumMov  		:= ""
Local cDataBco		:= ""
Local dDataMov		:= CtoD("")
Local cDataMov		:= ""
Local cValorMov		:= ""
Local cCodMov		:= ""
Local cDescrMov		:= ""
Local cTipoMov 		:= ""
Local cDescMov 		:= ""
Local cItem			:= Replicate("0",TamSx3("IG_ITEM")[1])
Local cChkSum		:= ""
Local nLinha		:= 0
Local nContReg		:= 0
Local nTamA6Cod		:= TamSX3( "A6_COD"     )[1]
Local nTamA6Agn 	:= TamSX3( "A6_AGENCIA" )[1]
Local nTamA6Num 	:= TamSX3( "A6_NUMCON"  )[1]
Local aConta		:= {}
Local lFa473Cta 	:= ExistBlock("FA473CTA")
Local lTemLacto		:= .F.

Default aLog := {}

dbSelectArea("SA6")
SA6->(DBSetOrder(1))

dbSelectArea("SIG")
SIG->(DBSetOrder(1))

dbSelectArea("SIF")
SIF->(DBSetOrder(1))

//Posiciona no Banco indicado 
dbSelectArea("SEE")
dbSetOrder(1)	//"EE_FILIAL+EE_CODIGO+EE_AGENCIA+EE_CONTA+EE_SUBCTA"
If dbSeek(xFilial("SEE")+aConfig1[2]+aConfig1[3]+aConfig1[4]+aConfig1[5])
	lFebraban := IIF(SEE->EE_BYTESXT > 200 , .t., .f.)
	nTamDet	  := IIF(SEE->EE_BYTESXT > 0, SEE->EE_BYTESXT + 2, 202 )
	nTipoDat  := SEE->EE_TIPODAT
Else
	aAdd(aLog,{0,STR0049})//"Verifique os parametros digitados, pois não foi possível, localizar o registro das parametrizaçães de transmissão(SEE)."
	Return .F.
Endif

If Empty(nTipoDat)
	nTipoDat := IIF(nTamDet > 202, 4,1)		//1 = ddmmaa		4= ddmmaaaa
EndIf

//Abre arquivo de configuracao
cArqConf:=aConfig2[1]

If !FILE(cArqConf)
	aAdd(aLog,{0,STR0029}) // "Arquivo de Configuração não encontrado"
	Return .F.
Else
	nHdlConf:=FOPEN(cArqConf,0+64)
EndIf

//Leitura do arquivo de configuracao
nLidos := 0
FSEEK(nHdlConf,0,0)
nTamArq:=FSEEK(nHdlConf,0,2)
FSEEK(nHdlConf,0,0)

While nLidos <= nTamArq
	
	//Verifica o tipo de qual registro foi lido
	xBuffer := Space(85)
	FREAD(nHdlConf,@xBuffer,85)
	
	If SubStr(xBuffer,1,1) == CHR(1)  // Header
		nLidos+=85
		Loop
	EndIF
	
	If SubStr(xBuffer,1,1) == CHR(4) // Saldo Final
		nLidos+=85
		Loop
	EndIf
	
	//Dados do Saldo Inicial (Bco/Ag/Cta) 
	If !lPosBco  //Nro do Banco
		cPosBco:=Substr(xBuffer,17,10)
		nLenBco:=1+Int(Val(Substr(xBuffer,20,3)))-Int(Val(Substr(xBuffer,17,3)))
		lPosBco:= .T.
		nLidos+=85
		Loop
	EndIf
	If !lPosAge  //Agencia
		cPosAge :=Substr(xBuffer,17,10)
		nLenAge :=1+Int(Val(Substr(xBuffer,20,3)))-Int(Val(Substr(xBuffer,17,3)))
		lPosAge :=.T.
		nLidos+=85
		Loop
	EndIf
	If !lPosCta  //Nro Cta Corrente
		cPosCta=Substr(xBuffer,17,10)
		nLenCta=1+Int(Val(Substr(xBuffer,20,3)))-Int(Val(Substr(xBuffer,17,3)))
		lPosCta=.T.
		nLidos+=85
		Loop
	Endif
	If !lPosDif   // Diferencial de Lancamento
		cPosDif  :=Substr(xBuffer,17,10)
		nLenDif  :=1+Int(Val(Substr(xBuffer,20,3)))-Int(Val(Substr(xBuffer,17,3)))
		lPosDif  :=.t.
		nLidos+=85
		Loop
	EndIf

	//Os dados abaixo não são utilizados na reconciliacao.
	//Estao ai apenas p/leitura do arquivo de configuracao.
	If !lPosVSI   // Valor Saldo Inicial
		cPosVSI  :=Substr(xBuffer,17,10)
		nLenVSI  :=1+Int(Val(Substr(xBuffer,20,3)))-Int(Val(Substr(xBuffer,17,3)))
		lPosVSI  :=.t.
		nLidos+=85
		Loop
	EndIf
	If !lPosDSI   // Data Saldo Inicial
		cPosDSI  :=Substr(xBuffer,17,10)
		nLenDSI  :=1+Int(Val(Substr(xBuffer,20,3)))-Int(Val(Substr(xBuffer,17,3)))
		lPosDSI  :=.t.
		nLidos+=85
		Loop
	EndIf
	If !lPosDCI   // Identificador Deb/Cred do Saldo Inicial
		cPosDCI  :=Substr(xBuffer,17,10)
		nLenDCI  :=1+Int(Val(Substr(xBuffer,20,3)))-Int(Val(Substr(xBuffer,17,3)))
		lPosDCI  :=.t.
		nLidos+=85
		Loop
	EndIf
	
	//Dados dos Movimentos 
	If !lPosNum  // Nro do Lancamento no Extrato
		cPosNum:=Substr(xBuffer,17,10)
		nLenNum:=1+Int(Val(Substr(xBuffer,20,3)))-Int(Val(Substr(xBuffer,17,3)))
		lPosNum:=.t.
		nLidos+=85
		Loop
	EndIf
	
	If !lPosData  // Data da Movimentacao
		cPosData:=Substr(xBuffer,17,10)
		nLenData:=1+Int(Val(Substr(xBuffer,20,3)))-Int(Val(Substr(xBuffer,17,3)))
		lPosData:=.t.
		nLidos+=85
		Loop
	EndIf
	
	If !lPosValor  // Valor Movimentado
		cPosValor=Substr(xBuffer,17,10)
		nLenValor=1+Int(Val(Substr(xBuffer,20,3)))-Int(Val(Substr(xBuffer,17,3)))
		lPosValor=.t.
		nLidos+=85
		Loop
	EndIf
	
	If !lPosOcor // Ocorrencia do Banco
		cPosOcor	:=Substr(xBuffer,17,10)
		nLenOcor :=1+Int(Val(Substr(xBuffer,20,3)))-Int(Val(Substr(xBuffer,17,3)))
		lPosOcor	:=.t.
		nLidos+=85
		Loop
	EndIf
	
	If !lPosDescr  // Descricao do Lancamento
		cPosDescr:=Substr(xBuffer,17,10)
		nLenDescr:=1+Int(Val(Substr(xBuffer,20,3)))-Int(Val(Substr(xBuffer,17,3)))
		lPosDescr:=.t.
		nLidos+=85
		Loop
	EndIf
	
	If !lPosDif   // Diferencial de Lancamento
		cPosDif  :=Substr(xBuffer,17,10)
		nLenDif  :=1+Int(Val(Substr(xBuffer,20,3)))-Int(Val(Substr(xBuffer,17,3)))
		lPosDif  :=.t.
		nLidos+=85
		Loop
	EndIf
	
	Exit
Enddo

//fecha arquivo de configuracao
Fclose(nHdlConf)

//Abre arquivo enviado pelo banco
cArqEnt:= aConfig2[2]
IF !FILE(cArqEnt)
	aAdd(aLog,{0,STR0030}) //"Arquivo do Banco não encontrado"
	Return .F.
Else
	nHdlBco:=FOPEN(cArqEnt,0+64)
EndIF


//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Ler arquivo enviado pelo banco ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
nLidos:=0
FSEEK(nHdlBco,0,0)
nTamArq:=FSEEK(nHdlBco,0,2)
FSEEK(nHdlBco,0,0)

cChkSum := F473CHKSUM(nHdlBco)

SIF->(dbSetOrder(3))//IF_FILIAL + IF_ARQSUM
If SIF->(dbSeek(xFilial("SIF") + cChkSum ) )
	aAdd(aLog,{0,STR0039}) //"Arquivo de Extrato já importado"
	Fclose(nHdlBco)
	Return .F.
EndIf

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Desenha o cursor e o salva para poder moviment -lo ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
nLidos 		:= 0

While nLidos <= nTamArq
	nLinha++
	
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Tipo qual registro foi lido ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	xBuffer:=Space(nTamDet)
	FREAD(nHdlBco,@xBuffer,nTamDet)
	
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Verifica o diferencial do registro de Lancamento 			³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If !lFebraban  // 200 posicoes
		cDifer :=Substr(xBuffer,Int(Val(Substr(cPosDif, 1,3))),nLenDif )
	Else
		cDifer := "xx"  // 240 posicoes
	Endif
	
	// Header do arquivo
	IF (SubStr(xBuffer,1,1) == "0" .and. !lFebraban).or. ; // 200 posicoes
		(Substr(xBuffer,8,1) == "0" .and. lFebraban)			// 240 posicoes
		nLidos+=nTamDet
		Loop
	EndIF
	
	//Trailer do arquivo
	IF (SubStr(xBuffer,1,1) == "9" .and. !lFebraban) .or. ; //200 posicoes
		(Substr(xBuffer,8,1) == "9" .and. lFebraban)			 //240 posicoes
		nLidos+=nTamDet
		Exit
	EndIF
	
	// Saldo Inicial
	IF (SubStr(xBuffer,1,1) == "1" .and. cDifer == "0" .and. !lFebraban) .Or. (SubStr(xBuffer,8,1) == "1" .and. lFebraban)

		cBanco   := Substr(xBuffer,Int(Val(Substr(cPosBco, 1,3))),nLenBco )
		cAgencia := Substr(xBuffer,Int(Val(Substr(cPosAge, 1,3))),nLenAge )
		cConta   := Substr(xBuffer,Int(Val(Substr(cPosCta, 1,3))),nLenCta )
		If lFa473Cta
			aConta   := ExecBlock("FA473CTA", .F., .F., {cBanco, cAgencia, cConta} )
			cBanco   := aConta[1]
			cAgencia := aConta[2]
			cConta   := aConta[3]
		EndIf

		If cBanco != AllTrim(aConfig1[2])
			lTemLacto := .T.
			Exit
		EndIf	
			
		A473VldBco(@cBanco , @cAgencia , @cConta, @nLinha, @aLog, @lRet)
				
		cBanco 		:= PadR( cBanco   , nTamA6Cod )
		cAgencia 	:= PadR( cAgencia , nTamA6Agn )
		cConta 		:= PadR( cConta   , nTamA6Num )

		If AllTrim(cBanco)!= AllTrim(aConfig1[2])
			aADD(aLog,{nLinha, STR0031 } ) //"Banco não cadastrado"
			lRet := .F.
		Endif

		nLidos+=nTamDet
		Loop
	EndIF

	// Saldo Final
	IF (SubStr(xBuffer,1,1) == "1" .and. cDifer == "2" .and. !lFebraban) .or. ;
			(Substr(xBuffer,8,1) == "5" .and. lFebraban)
		nLidos+=nTamDet
		Loop
	EndIF
	
	// Lancamentos
	IF (SubStr(xBuffer,1,1) == "1" .and. cDifer == "1" .and. !lFebraban) .or. ;
			(Substr(xBuffer,8,1) == "3" .and. lFebraban)
		
		lTemLacto := .T.	
		If lFa473Cta
			If Len(aConta) == 0
				aConta   := ExecBlock("FA473CTA", .F., .F., {cBanco, cAgencia, cConta} )
				cBanco   := aConta[1]
				cAgencia := aConta[2]
				cConta   := aConta[3]
			EndIf
		Else
			cBanco   := Substr(xBuffer,Int(Val(Substr(cPosBco, 1,3))),nLenBco )
			cAgencia := Substr(xBuffer,Int(Val(Substr(cPosAge, 1,3))),nLenAge )
			cConta   := Substr(xBuffer,Int(Val(Substr(cPosCta, 1,3))),nLenCta )
		Endif

		A473VldBco( @cBanco , @cAgencia , @cConta, @nLinha, @aLog )

		cBanco 		:= PadR( cBanco   , nTamA6Cod )
		cAgencia 	:= PadR( cAgencia , nTamA6Agn )
		cConta 		:= PadR( cConta   , nTamA6Num )

		cNumMov  :=Substr(xBuffer,Int(Val(Substr(cPosNum,1,3))),nLenNum)
		cDataBco :=Substr(xBuffer,Int(Val(Substr(cPosData,1,3))),nLenData)
		cDataBco :=ChangDate(cDataBco,nTipoDat)
		dDataMov :=Ctod(Substr(cDataBco,1,2)+"/"+Substr(cDataBco,3,2)+"/"+Substr(cDataBco,5,2),"ddmmyy")
		cDataMov :=dToc(dDataMov)

		cValorMov:=Round(Val(Substr(xBuffer,Int(Val(Substr(cPosValor,1,3))),nLenValor))/100,2)
		cCodMov	 :=Substr(xBuffer,Int(Val(Substr(cPosOcor,1,3))),nLenOcor)
		cDescrMov:=Substr(xBuffer,Int(Val(Substr(cPosDescr,1,3))),nLenDescr)
		
		
		dbSelectArea("SEJ")
		If dbSeek(xFilial("SEJ")+cBanco+cCodMov)
			cTipoMov := SEJ->EJ_OCORSIS
			cDescMov := SEJ->EJ_DESCR
			cDebCred := SEJ->EJ_DEBCRE
		Else
			aADD(aLog,{nLinha , STR0032 + " - " + cCodMov } ) //"Ocorrencia Não Encontrada"
			lGrava 	:= .F.
			lRet 	:= .F.
		Endif

		If lGrava
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Grava dados no arquivo de trabalho³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ 
			If lGravaSIF
				RecLock("SIF",.T.)
				SIF->IF_FILIAL 	:= xFilial("SIF")
				SIF->IF_IDPROC  := aConfig1[1]
				SIF->IF_DTPROC  := ctod(cDataMov)
				SIF->IF_BANCO	:= aConfig1[2]
				SIF->IF_DESC	:= aConfig1[6]
				SIF->IF_STATUS 	:= '1'
				SIF->IF_ARQCFG	:= aConfig2[1]
				SIF->IF_ARQIMP	:= aConfig2[2]
				SIF->IF_ARQSUM	:= cChkSum
				SIF->(MsUnlock())
				lGravaSIF:= .F.
			EndIf

			//Grava se não tiver inconsistência

			If SA6->(DbSeek(xFilial("SA6")+cBanco+cAgencia+cConta)) .And. SA6->A6_BLOCKED <> "1"//A6_FILIAL+A6_COD+A6_AGENCIA+A6_NUMCON
				// Grava SIG
				RecLock("SIG",.T.)
				cItem := Soma1(cItem)
				SIG->IG_FILIAL 	:= xFilial("SIG")
				SIG->IG_IDPROC	:= aConfig1[1]
				SIG->IG_ITEM	:= cItem
				SIG->IG_STATUS	:= '1'
				SIG->IG_DTEXTR	:= CTOD(cDataMov)
				SIG->IG_DOCEXT	:= cNumMov
				SIG->IG_SEQMOV  := F473ProxNum("SIG")
				SIG->IG_VLREXT 	:= Val(str(cValorMov,17,2))
				SIG->IG_TIPEXT	:= cCodMov
				SIG->IG_CARTER	:= IIF(cDebCred=="D","2","1")
				SIG->IG_AGEEXT  := cAgencia
				SIG->IG_CONEXT  := cConta
				SIG->IG_HISTEXT := cDescrMov
				SIG->IG_FILORIG := cFilAnt

				If __lUpdated
					SIG->IG_BCOEXT  := cBanco
				Endif

				SIG->(MsUnlock())
				nContReg++
			Else
				aADD(aLog,{nLinha , STR0040  + cBanco + STR0041 + cAgencia + STR0042 + cConta + STR0043 } )//"Banco: "##" Agencia: "##" Conta: "##" não existe."
				lRet := .F.
			EndIf
		EndIf

	Endif
	nLidos += nTamDet
Enddo

If nContReg <= 0
	If !lTemLacto	
		aADD(aLogLanc,{0 , STR0073 } )//"Este arquivo de extrato não possui lançamentos. "
		lRet := .F.
	Else
		aADD(aLog,{0 , STR0046 } )//"Arquivo de Extrato Inválido. Verifique arquivo de configuração e extrato."
		lRet := .F.
	EndIf
EndIf

//Fecha arquivo do Banco 
Fclose(nHdlBco)

Return lRet


//------------------------------------------------------------------------------
/*/{Protheus.doc} F473LogExt()
	Visualizar o Log de Inconsistências
	
	@type  Function
	@author pequim
	@since 25/09/2012
	@version 12
/*/
//------------------------------------------------------------------------------
Function F473LogExt(cAlias,nReg,nOpc)

ProcLogView(,__cProcPrinc)

Return .T.


//-------------------------------------------------------------------
/*/{Protheus.doc} F473CHKSUM

Retorna o CheckSum do Arquivo.

@author	Alvaro Camillo Neto
@since		01/10/13
@version	MP11.90
		
/*/
//-------------------------------------------------------------------
Static Function F473CHKSUM(nHdlBco)
Local cRet		:= ""
Local cBuffer	:= Space(402)
Local nOffSet	:= fSeek(nHdlBco,0,FS_RELATIVE) // Sera utilizado para retornar o ponteiro do arquivo a posicao original
Local nTamArq	:= fSeek(nHdlBco,0,FS_END) // Obtem o tamanho do arquivo
Local cIdArq    := ""
Local cTrailler := ""

fSeek(nHdlBco,-804,FS_END) // Volta 804 bytes para compor o CheckSum

// Le o arquivo ate final
While fReadLn(nHdlBco,@cBuffer,402)
	cRet += cBuffer
End

fSeek(nHdlBco,nOffSet,FS_SET) // Retorna o ponteiro para a posicao original

cTrailler := cRet+Transform(nTamArq,"")

cIdArq	 := Str(MsCrc32(cTrailler),10) 

Return cIdArq

//-------------------------------------------------------------------
/*/{Protheus.doc} F473ProxNum

Retorna o próximo número da chave

@author	Alvaro Camillo Neto
@since		01/10/13
@version	MP11.90
		
/*/
//-------------------------------------------------------------------
Static Function F473ProxNum(cTab)
Local cNovaChave := ""
Local aArea := GetArea()
Local cCampo := ""
Local cChave 
Local nIndex := 0

If cTab == "SIF"
	SIF->(dbSetOrder(1))//IF_FILIAL+IF_IDPROC
	cCampo := "IF_IDPROC"
	nIndex := 1	
Else
	SIG->(dbSetOrder(2))//IG_FILIAL+IG_SEQMOV
	cCampo := "IG_SEQMOV"
	cChave := "IG_SEQMOV"+cEmpAnt
	nIndex := 2
EndIf


While .T.
	(cTab)->(dbSetOrder(nIndex))
	cNovaChave := GetSXEnum(cTab,cCampo,cChave,nIndex)
	ConfirmSX8()
	If cTab == "SIF" 
		If (cTab)->(!dbSeek(xFilial(cTab) + cNovaChave) )
			Exit
		EndIf
	Else
		If (cTab)->(!dbSeek(cNovaChave) )
			Exit
		EndIf
	EndIf
EndDo

RestArea(aArea)
Return cNovaChave

//-------------------------------------------------------------------
/*/{Protheus.doc} A473VldBco
Valida o banco, agencia e conta 
Funcao retirada do FINA910A
@author	Daniel Mendes
@since		30/05/16
@version	12.1.7
/*/
//-------------------------------------------------------------------
Static Function A473VldBco( cBanco , cAgencia , cConta, nLinha, aLog, lRet )
Local aAreaATU := GetArea()
Local aAreaSA6 := SA6->( GetArea() )
Local cFilSA6  := xFilial( 'SA6' )
Local nSubAge  := 0
Local nSubCon  := 0
Local lStop    := .F.

If !SA6->( MsSeek( cFilSA6 + cBanco + cAgencia + cConta ) )
	SA6->( MsSeek( cFilSA6 + cBanco ) )

	While !SA6->( Eof() ) .And. cFilSA6 == SA6->A6_FILIAL .And. cBanco == AllTrim(SA6->A6_COD) .And. !lStop
		
		If SA6->A6_BLOCKED = '1' //Se banco estiver bloqueado ceverá ser pulado
			SA6->( DbSkip() )
			Loop
		EndIf
			
		nSubAge := At( Alltrim( SA6->A6_AGENCIA ) , cAgencia )
		nSubCon := At( Alltrim( SA6->A6_NUMCON  ) , cConta   )
		If nSubAge > 0 .And. nSubCon > 0
			If ( SubStr( cAgencia , 1 , nSubAge-1 ) == StrZero( 0 , nSubAge-1 ) .Or. ;// Valida 0 a esquerda: Agencia 
			     Alltrim( SA6->A6_AGENCIA ) == AllTrim( cAgencia ) ) ;
			   .And. ;
			   ( SubStr( cConta   , 1 , nSubCon-1 ) == StrZero( 0 , nSubCon-1 ) .Or. ;// Valida 0 a esquerda: Conta Corrente
			     Alltrim( SA6->A6_NUMCON  ) == AllTrim( cConta   ) )
				cAgencia := SA6->A6_AGENCIA
				cConta   := SA6->A6_NUMCON
				cBanco   := SA6->A6_COD
				lStop    := .T.
			EndIf
		EndIf
		SA6->( DbSkip() )
	EndDo
	
	If Empty(nSubAge) .or. Empty(nSubCon)  
		aADD(aLog,{nLinha , STR0040  + cBanco + STR0041 + cAgencia + STR0042 + cConta + STR0043 } )//"Banco: "##" Agencia: "##" Conta: "##" não existe."
		lRet := .F.		
	EndIf
	
EndIf

RestArea( aAreaSA6 )
RestArea( aAreaATU )
aSize( aAreaSA6 , 0 )
aSize( aAreaATU , 0 )
aAreaSA6 := Nil
aAreaATU := Nil

Return Nil

//-------------------------------------------------------------------
/*/{Protheus.doc} FA473VlBCd
Valida campos vazios da tela de wizard 
@author	Francisco Oliveira
@since		10/09/18
@version	12.1.7
/*/
//-------------------------------------------------------------------
Function FA473VlBCd(aCfgParam)

Local lRet 	:= .T.
Local nY	:= 0

Default aCfgParam := {}

For nY := 1 To Len(aCfgParam)
	If Empty(aCfgParam[nY])
		Help( ,,"FA473VlBCd",, STR0074 , 1, 0 ) // "Existem campos obrigatorios não preenchidos. Favor verificar"
		lRet := .F.
		Exit
	Endif
Next nY

Return lRet

//------------------------------------------------------------------------------
/*/{Protheus.doc} F473DicOk()
	Verifica se o dicionário está atualizado (SEE e SIF)
	
	@type  Function
	@author pequim
	@since 15/08/2022
	@version 12.1.2310
/*/
//------------------------------------------------------------------------------
Function F473DicOk()

	If __lUpdated == NIL
		__lUpdated := SIG->(ColumnPos("IG_BCOEXT")) > 0
	Endif

Return __lUpdated
